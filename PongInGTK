#include <gtk/gtk.h>
#include <gdk/gdkkeysyms.h>
#include <string.h>
#include <unistd.h>

/* 

   Unfinished, very crude prototype for moving Pong to GUI. 
   As I learn along with writing the code; most of the code is
   written just good enough to work to get the idea of concepts 
   behind GTK, Glib, etc.

*/

int** create_playing_field(int size_x, int size_y)
{
	int** field;
	field = malloc(size_x * sizeof(int*));
	for (int x = 0; x < size_x; x++)
	{
		field[x] = malloc(size_y * sizeof(int));
		for (int i = 0; i < size_y; i++)
		{
			field[x][i] = 1;
		}
	}
	return field;
}

void draw_field(char* string_array, int** field, int sizex, int sizey)
{
	memset(string_array, 0, 110);
	for (int x = 0; x < sizex; x++)
	{
		for (int y = 0; y < sizey; y++)
		{
			char converted[2];
			sprintf(converted, "%d", field[x][y]);
			strcat(string_array, converted);
		}
		strcat(string_array, "\n");
	}
	strcat(string_array, "\0");
}

struct PlayingField
{
	int sizex;
	int sizey;
	int** field;
};

struct FieldDisplay
{
	char text_to_draw[110];
};

struct Ball
{
	int posx;
	int posy;
	int map_repr;
	int speed;
	int direction;
	int sway;
};

struct Ponger
{
	int posx;
	int posy;
	int size;
	int map_repr;
};

struct DataContainer
{
	struct PlayingField PF;
	struct FieldDisplay FD;
	struct Ball BL;
	struct Ponger PG1;
	struct Ponger PG2;
	GtkTextBuffer* buf;
};

int game_is_on;
GtkWidget* view;
GtkTextBuffer* buffer;

void* game_on(gpointer datacon)
{
	struct DataContainer* d;
	d = datacon;

	while (game_is_on == 1)
	{
		sleep(1.0);
		int old_ballx = d->BL.posx;
		int old_bally = d->BL.posy;
		switch (d->BL.direction)
		{
			case 0:	
				if (d->BL.posy - 1 >= 0 && d->PF.field[d->BL.posx][d->BL.posy-1] == 1)
				{
					d->BL.posy -= 1;
					break;
				}
				else 
				{
					d->BL.direction = 1;
					break;
				}
			case 1:
				if (d->BL.posy + 1 <= d->PF.sizey && d->PF.field[d->BL.posx][d->BL.posy+1] == 1)
				{
					d->BL.posy += 1;
					break;
				}
				else 
				{
					d->BL.direction = 0;
					break;
				}
		}
		d->PF.field[old_ballx][old_bally] = 1;
		d->PF.field[d->BL.posx][d->BL.posy] = d->BL.map_repr;
		draw_field(d->FD.text_to_draw, d->PF.field, d->PF.sizex, d->PF.sizey);
	}
}

gboolean wsad_func(GtkWidget *widget, GdkEventKey* event, gpointer user_data)
{
	struct DataContainer* d;
	d = user_data;
	int old_pg1x = d->PG1.posx;
	int old_pg1y = d->PG1.posy;
	if (event->keyval == 's')
	{
		if (d->PG1.posx + 3 <= d->PF.sizex)
		{
			d->PG1.posx += 1;
		}
	}
	else if (event->keyval == 'w')
	{
		if (d->PG1.posx - 1 >= 0)
		{
			d->PG1.posx -= 1;

		}
	}
	for (int x = 0; x < d->PG1.size; x++)
	{
		d->PF.field[old_pg1x + x][old_pg1y] = 1;
	}
	for (int x = 0; x < d->PG1.size; x++)
	{
		d->PF.field[d->PG1.posx + x][d->PG1.posy] = d->PG1.map_repr;
	}
}

static gboolean refresh_buffer(gpointer user_data)
{
	struct DataContainer* d;
	d = user_data;
	gtk_text_buffer_set_text(d->buf, d->FD.text_to_draw, -1);
	return TRUE;
}

void start_game(GtkWidget *widget, gpointer user_data)
{
	struct DataContainer* d;
	d = user_data;
	game_is_on = 1;
	for (int x = 0; x < d->PG1.size; x++)
	{
		d->PF.field[d->PG1.posx + x][d->PG1.posy] = d->PG1.map_repr;
	}
	g_thread_new("game_on", game_on, d);
}

static void activate(GtkApplication* app, gpointer user_data)
{
	
	GtkWidget* window;
	GtkWidget* main_box;
	GtkWidget* start_box;
	GtkWidget* text_box;
	GtkWidget* start_button;

	struct Ponger pg1;
	pg1.posx = 5;
	pg1.posy = 0;
	pg1.size = 3;
	pg1.map_repr = 5;

	struct PlayingField pf;
	pf.sizex = 10;
	pf.sizey = 10;
	pf.field = create_playing_field(pf.sizex, pf.sizey);

	struct FieldDisplay fd;

	struct Ball ball;
	ball.posx = 5;
	ball.posy = 5;
	ball.map_repr = 0;
	ball.speed = 0;
	ball.direction = 0;
	ball.sway = 0;

	window = gtk_application_window_new(app);
	gtk_window_set_title(GTK_WINDOW(window), "Window");
	gtk_window_set_default_size(GTK_WINDOW(window), 800, 600);

	view = gtk_text_view_new();
	buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(view));

	struct DataContainer* dc = malloc(sizeof(*dc));
	dc->PF = pf;
	dc->FD = fd;
	dc->BL = ball;
	dc->PG1 = pg1;
	dc->buf = buffer;
	// Text
	gtk_text_buffer_set_text(buffer, fd.text_to_draw, -1);
	// Boxes
	main_box = gtk_fixed_new();

	start_box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 20);
	gtk_widget_set_halign(start_box, GTK_ALIGN_CENTER);
	gtk_widget_set_valign(start_box, GTK_ALIGN_CENTER);
	text_box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 20);
	gtk_widget_set_halign(text_box, GTK_ALIGN_CENTER);
	gtk_widget_set_valign(text_box, GTK_ALIGN_CENTER);

	gtk_fixed_put(GTK_FIXED(main_box), start_box, 50, 15);
	gtk_widget_set_size_request(start_box, 50, 15);
	gtk_fixed_put(GTK_FIXED(main_box), text_box, 50, 50);
	gtk_widget_set_size_request(text_box, 220, 220);
	gtk_box_pack_start(GTK_BOX(text_box), view, 1, 1, 10);
	
	start_button = gtk_button_new_with_label("Start Game");
	g_signal_connect(start_button, "clicked", G_CALLBACK(start_game), dc);
	gtk_box_pack_start(GTK_BOX(start_box), start_button, 0, 0, 10);

	gtk_widget_add_events(window, GDK_KEY_PRESS_MASK);
	g_signal_connect(G_OBJECT(window), "key_press_event", G_CALLBACK(wsad_func), dc);

	gtk_container_add(GTK_CONTAINER(window), main_box);
	gtk_widget_show_all(window);
	g_timeout_add_seconds(1, refresh_buffer, dc);

}

int main(int argc, char** argv)
{
	GtkApplication *app;
	int status;
	app = gtk_application_new("org.gtk.example", G_APPLICATION_DEFAULT_FLAGS);

	g_signal_connect(app, "activate", G_CALLBACK(activate), NULL);
	status = g_application_run(G_APPLICATION(app), argc, argv);
	g_object_unref(app);
	return status;
}
